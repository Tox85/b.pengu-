#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üêß Test E2E Final - Validation compl√®te de la cha√Æne');

async function testE2EFinal() {
  const startTime = Date.now();
  let success = false;
  let error = null;
  let results = {
    sanityCheck: null,
    ensureSol: null,
    orcaLp: null
  };

  try {
    // Step 1: Sanity check .env
    console.log('\n1Ô∏è‚É£ V√©rification configuration .env...');
    const sanityResult = await runScript('scripts/sanity-env.js', []);
    if (sanityResult.code !== 0) {
      throw new Error('Configuration .env invalide');
    }
    results.sanityCheck = { success: true };
    console.log('   ‚úÖ Configuration .env OK');

    // Step 2: Ensure SOL (DRY_RUN)
    console.log('\n2Ô∏è‚É£ V√©rification SOL (DRY_RUN)...');
    const ensureSolResult = await runScript('scripts/ensure-sol.js', ['--dry-run']);
    if (ensureSolResult.code !== 0) {
      throw new Error('√âchec de la v√©rification SOL');
    }
    results.ensureSol = { success: true, output: ensureSolResult.output };
    console.log('   ‚úÖ SOL v√©rifi√© (DRY_RUN)');

    // Step 3: Orca LP (DRY_RUN)
    console.log('\n3Ô∏è‚É£ LP Orca PENGU/WSOL (DRY_RUN)...');
    const lpResult = await runScript('scripts/orca-lp-tx2-live.js', [
      '--pengu=0.02',
      '--wsol=0.0002', 
      '--tick-range=15',
      '--dry-run'
    ]);
    
    if (lpResult.code !== 0) {
      throw new Error('√âchec du LP Orca');
    }
    results.orcaLp = { success: true, output: lpResult.output };
    console.log('   ‚úÖ LP Orca simul√© (DRY_RUN)');

    success = true;

  } catch (err) {
    error = err;
    console.error(`‚ùå Erreur: ${err.message}`);
  }

  // R√©sum√© final
  const duration = Date.now() - startTime;
  console.log(`\nüìä R√©sum√© Test E2E Final:`);
  console.log(`   Dur√©e: ${duration}ms`);
  console.log(`   Succ√®s: ${success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Erreur: ${error ? error.message : 'Aucune'}`);

  console.log(`\nüìã D√©tails des √©tapes:`);
  console.log(`   1. Sanity Check: ${results.sanityCheck?.success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   2. Ensure SOL: ${results.ensureSol?.success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   3. Orca LP: ${results.orcaLp?.success ? '‚úÖ' : '‚ùå'}`);

  if (success) {
    console.log('\nüéâ Test E2E Final r√©ussi !');
    console.log('   Cha√Æne E2E compl√®te valid√©e');
    console.log('   Tous les composants fonctionnent');
    console.log('   Pr√™t pour ex√©cution LIVE');
  } else {
    console.log('\nüí• Test E2E Final √©chou√© !');
    process.exit(1);
  }
}

function runScript(scriptPath, args) {
  return new Promise((resolve) => {
    const fullPath = path.resolve(scriptPath);
    const child = spawn('node', [fullPath, ...args], {
      stdio: 'pipe',
      shell: true
    });

    let output = '';
    let error = '';

    child.stdout.on('data', (data) => {
      const text = data.toString();
      output += text;
      console.log(text.trim());
    });

    child.stderr.on('data', (data) => {
      const text = data.toString();
      error += text;
      console.error(text.trim());
    });

    child.on('close', (code) => {
      resolve({
        code,
        output,
        error
      });
    });

    child.on('error', (err) => {
      resolve({
        code: 1,
        output,
        error: err.message
      });
    });
  });
}

// Ex√©cution
if (require.main === module) {
  testE2EFinal();
}

module.exports = { testE2EFinal };
