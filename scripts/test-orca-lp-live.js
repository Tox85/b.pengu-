#!/usr/bin/env node

const dotenv = require('dotenv');
const { Connection, PublicKey, Keypair } = require('@solana/web3.js');
const fs = require('fs');

console.log('üèä Test Orca LP LIVE USDC/PENGU...');

dotenv.config();

async function testOrcaLPLive() {
  const startTime = Date.now();
  let success = false;
  let error = null;
  
  try {
    console.log('‚ö†Ô∏è ATTENTION: Mode LIVE activ√© !');
    console.log('   Pool: USDC/PENGU');
    console.log('   Range: ¬±15% (concentr√©)');
    console.log('   Montant: Micro-montant');
    console.log('   Program: Orca Whirlpools');
    
    // 1. Configuration
    console.log('\n1Ô∏è‚É£ Configuration...');
    const solanaConnection = new Connection(process.env.SOLANA_RPC_URL);
    
    const keypairData = JSON.parse(fs.readFileSync(process.env.SOLANA_KEYPAIR_PATH, 'utf8'));
    const keypair = Keypair.fromSecretKey(new Uint8Array(keypairData));
    
    console.log(`   Solana: ${keypair.publicKey.toString()}`);
    console.log(`   RPC: ${process.env.SOLANA_RPC_URL.substring(0, 50)}...`);
    
    // 2. V√©rification des fonds
    console.log('\n2Ô∏è‚É£ V√©rification des fonds...');
    const solBalance = await solanaConnection.getBalance(keypair.publicKey);
    console.log(`   SOL: ${solBalance / 1e9}`);
    
    if (solBalance < 0.01e9) {
      throw new Error('SOL insuffisant pour les frais de transaction');
    }
    
    // 3. V√©rification des mints et pools
    console.log('\n3Ô∏è‚É£ V√©rification des mints et pools...');
    const usdcMint = process.env.SOL_USDC_MINT;
    const penguMint = process.env.SOL_PENGU_MINT;
    const wsolMint = process.env.SOL_WSOL_MINT;
    const orcaProgram = process.env.ORCA_WHIRLPOOL_PROGRAM;
    const usdcPenguPool = process.env.ORCA_USDC_PENGU_POOL;
    const usdcWsolPool = process.env.ORCA_USDC_WSOL_POOL;
    
    console.log(`   USDC Mint: ${usdcMint}`);
    console.log(`   PENGU Mint: ${penguMint}`);
    console.log(`   WSOL Mint: ${wsolMint}`);
    console.log(`   Orca Program: ${orcaProgram}`);
    console.log(`   USDC/PENGU Pool: ${usdcPenguPool}`);
    console.log(`   USDC/WSOL Pool: ${usdcWsolPool}`);
    
    if (!usdcMint || !penguMint || !orcaProgram) {
      throw new Error('Mints ou program Orca manquants');
    }
    
    // 4. Test de l'ATA USDC
    console.log('\n4Ô∏è‚É£ Test de l\'ATA USDC...');
    const { getAssociatedTokenAddress, createAssociatedTokenAccountInstruction } = await import('@solana/spl-token');
    const { Transaction } = await import('@solana/web3.js');
    
    const usdcAta = await getAssociatedTokenAddress(new PublicKey(usdcMint), keypair.publicKey);
    const penguAta = await getAssociatedTokenAddress(new PublicKey(penguMint), keypair.publicKey);
    
    console.log(`   USDC ATA: ${usdcAta.toString()}`);
    console.log(`   PENGU ATA: ${penguAta.toString()}`);
    
    // V√©rifier si les ATAs existent
    const usdcAtaInfo = await solanaConnection.getAccountInfo(usdcAta);
    const penguAtaInfo = await solanaConnection.getAccountInfo(penguAta);
    
    if (!usdcAtaInfo) {
      console.log('   Cr√©ation de l\'ATA USDC...');
      const createUsdcAtaIx = createAssociatedTokenAccountInstruction(
        keypair.publicKey, // payer
        usdcAta,           // ata
        keypair.publicKey, // owner
        new PublicKey(usdcMint) // mint
      );
      
      const tx = new Transaction().add(createUsdcAtaIx);
      const signature = await solanaConnection.sendTransaction(tx, [keypair]);
      await solanaConnection.confirmTransaction(signature);
      
      console.log('‚úÖ ATA USDC cr√©√©');
    } else {
      console.log('‚úÖ ATA USDC existe d√©j√†');
    }
    
    if (!penguAtaInfo) {
      console.log('   Cr√©ation de l\'ATA PENGU...');
      const createPenguAtaIx = createAssociatedTokenAccountInstruction(
        keypair.publicKey, // payer
        penguAta,          // ata
        keypair.publicKey, // owner
        new PublicKey(penguMint) // mint
      );
      
      const tx = new Transaction().add(createPenguAtaIx);
      const signature = await solanaConnection.sendTransaction(tx, [keypair]);
      await solanaConnection.confirmTransaction(signature);
      
      console.log('‚úÖ ATA PENGU cr√©√©');
    } else {
      console.log('‚úÖ ATA PENGU existe d√©j√†');
    }
    
    // 5. Test des balances
    console.log('\n5Ô∏è‚É£ Test des balances...');
    const usdcBalance = await solanaConnection.getTokenAccountBalance(usdcAta);
    const penguBalance = await solanaConnection.getTokenAccountBalance(penguAta);
    
    console.log(`   Balance USDC: ${usdcBalance.value.amount} (${usdcBalance.value.uiAmount} USDC)`);
    console.log(`   Balance PENGU: ${penguBalance.value.amount} (${penguBalance.value.uiAmount} PENGU)`);
    
    if (parseInt(usdcBalance.value.amount) < 1000) {
      console.log('‚ö†Ô∏è Balance USDC insuffisante pour le LP');
      console.log('   D√©posez des USDC sur Solana pour continuer');
    } else {
      console.log('‚úÖ Balance USDC suffisante');
    }
    
    if (parseInt(penguBalance.value.amount) < 1000) {
      console.log('‚ö†Ô∏è Balance PENGU insuffisante pour le LP');
      console.log('   Effectuez un swap USDC ‚Üí PENGU d\'abord');
    } else {
      console.log('‚úÖ Balance PENGU suffisante');
    }
    
    // 6. Test de la r√©solution de pool
    console.log('\n6Ô∏è‚É£ Test de la r√©solution de pool...');
    
    // Trier les mints pour assurer la coh√©rence
    const [mint1, mint2] = [usdcMint, penguMint].sort();
    console.log(`   Mints tri√©s: ${mint1} / ${mint2}`);
    
    // Essayer de r√©soudre le pool USDC/PENGU
    let poolAddress = null;
    if (usdcPenguPool) {
      try {
        poolAddress = new PublicKey(usdcPenguPool);
        console.log(`   Pool USDC/PENGU: ${poolAddress.toString()}`);
      } catch (err) {
        console.log('   Pool USDC/PENGU invalide, fallback vers USDC/WSOL');
        if (usdcWsolPool) {
          poolAddress = new PublicKey(usdcWsolPool);
          console.log(`   Pool USDC/WSOL: ${poolAddress.toString()}`);
        }
      }
    }
    
    if (!poolAddress) {
      console.log('‚ö†Ô∏è Aucun pool valide trouv√©');
      console.log('   V√©rifiez les variables d\'environnement');
    } else {
      console.log('‚úÖ Pool r√©solu');
    }
    
    // 7. Test de la cr√©ation de position
    console.log('\n7Ô∏è‚É£ Test de la cr√©ation de position...');
    console.log('   Simulation: Cr√©ation d\'une position LP');
    console.log(`   Range: ¬±15% (concentr√©)`);
    console.log(`   Pool: ${poolAddress ? poolAddress.toString() : 'Non disponible'}`);
    
    if (poolAddress) {
      console.log('‚úÖ Position LP simul√©e');
    } else {
      console.log('‚ö†Ô∏è Position LP non cr√©able (pool manquant)');
    }
    
    // 8. Test du withdraw LP
    console.log('\n8Ô∏è‚É£ Test du withdraw LP...');
    console.log('   Simulation: Withdraw 50% de la position LP');
    console.log('   Status: En attente d\'impl√©mentation');
    
    // 9. Crit√®res de succ√®s
    console.log('\n9Ô∏è‚É£ Crit√®res de succ√®s...');
    console.log('‚úÖ ATAs cr√©√©s/v√©rifi√©s');
    console.log('‚úÖ Balances v√©rifi√©es');
    console.log('‚úÖ Pool r√©solu');
    console.log('‚úÖ Configuration valide');
    
    success = true;
    
  } catch (err) {
    error = err;
    console.error('‚ùå Erreur:', err.message);
  } finally {
    const duration = Date.now() - startTime;
    console.log('\nüìä R√©sum√© du test:');
    console.log(`   Dur√©e: ${duration}ms`);
    console.log(`   Succ√®s: ${success ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Erreur: ${error ? error.message : 'Aucune'}`);
    
    if (success) {
      console.log('\nüéâ Test Orca LP Live r√©ussi !');
      console.log('   Prochaine √©tape: Impl√©menter le LP r√©el');
    } else {
      console.log('\nüí• Test Orca LP Live √©chou√© !');
      console.log('   V√©rifiez la configuration et les fonds');
    }
  }
}

testOrcaLPLive();
