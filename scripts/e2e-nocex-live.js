#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üêß E2E No CEX Live - Cha√Æne compl√®te sans CEX');
console.log('   Base(USDC) ‚Üí Bridge ‚Üí Solana(USDC) ‚Üí Swap ‚Üí PENGU ‚Üí LP Orca');

async function runE2ENoCEX() {
  const startTime = Date.now();
  let success = false;
  let error = null;
  let results = {
    sanityCheck: null,
    ensureSol: null,
    jupiterSwap: null,
    orcaLp: null
  };

  try {
    // Step 1: Sanity check .env
    console.log('\n1Ô∏è‚É£ V√©rification configuration .env...');
    const sanityResult = await runScript('scripts/sanity-env.js', []);
    if (sanityResult.code !== 0) {
      throw new Error('Configuration .env invalide');
    }
    results.sanityCheck = { success: true };
    console.log('   ‚úÖ Configuration .env OK');

    // Step 2: Ensure SOL
    console.log('\n2Ô∏è‚É£ V√©rification et approvisionnement SOL...');
    const ensureSolResult = await runScript('scripts/ensure-sol.js', []);
    if (ensureSolResult.code !== 0) {
      throw new Error('√âchec de l\'approvisionnement SOL');
    }
    results.ensureSol = { success: true, output: ensureSolResult.output };
    console.log('   ‚úÖ SOL v√©rifi√©/approvisionn√©');

    // Step 3: Jupiter Swap (optionnel, garder pour compatibilit√©)
    console.log('\n3Ô∏è‚É£ Swap USDC ‚Üí PENGU (optionnel)...');
    const swapResult = await runScript('scripts/jupiter-swap-live.js', ['--amount=0.001', '--dry-run']);
    if (swapResult.code !== 0) {
      console.log('   ‚ö†Ô∏è  Swap Jupiter √©chou√©, continuons sans...');
    } else {
      results.jupiterSwap = { success: true, output: swapResult.output };
      console.log('   ‚úÖ Swap Jupiter simul√©');
    }

    // Step 4: Orca LP
    console.log('\n4Ô∏è‚É£ LP Orca PENGU/WSOL...');
    const lpResult = await runScript('scripts/orca-lp-tx2-live.js', [
      '--pengu=0.02',
      '--wsol=0.0002', 
      '--tick-range=15',
      '--dry-run'
    ]);
    
    if (lpResult.code !== 0) {
      throw new Error('√âchec du LP Orca');
    }
    results.orcaLp = { success: true, output: lpResult.output };
    console.log('   ‚úÖ LP Orca simul√©');

    success = true;

  } catch (err) {
    error = err;
    console.error(`‚ùå Erreur: ${err.message}`);
  }

  // R√©sum√© final
  const duration = Date.now() - startTime;
  console.log(`\nüìä R√©sum√© E2E No CEX Live:`);
  console.log(`   Dur√©e: ${duration}ms`);
  console.log(`   Succ√®s: ${success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Erreur: ${error ? error.message : 'Aucune'}`);

  console.log(`\nüìã D√©tails des √©tapes:`);
  console.log(`   1. Sanity Check: ${results.sanityCheck?.success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   2. Ensure SOL: ${results.ensureSol?.success ? '‚úÖ' : '‚ùå'}`);
  console.log(`   3. Jupiter Swap: ${results.jupiterSwap?.success ? '‚úÖ' : '‚ö†Ô∏è'}`);
  console.log(`   4. Orca LP: ${results.orcaLp?.success ? '‚úÖ' : '‚ùå'}`);

  if (success) {
    console.log('\nüéâ E2E No CEX Live r√©ussi !');
    console.log('   Cha√Æne compl√®te valid√©e');
    console.log('   Pr√™t pour ex√©cution LIVE');
  } else {
    console.log('\nüí• E2E No CEX Live √©chou√© !');
    process.exit(1);
  }
}

function runScript(scriptPath, args) {
  return new Promise((resolve) => {
    const fullPath = path.resolve(scriptPath);
    const child = spawn('node', [fullPath, ...args], {
      stdio: 'pipe',
      shell: true
    });

    let output = '';
    let error = '';

    child.stdout.on('data', (data) => {
      const text = data.toString();
      output += text;
      console.log(text.trim());
    });

    child.stderr.on('data', (data) => {
      const text = data.toString();
      error += text;
      console.error(text.trim());
    });

    child.on('close', (code) => {
      resolve({
        code,
        output,
        error
      });
    });

    child.on('error', (err) => {
      resolve({
        code: 1,
        output,
        error: err.message
      });
    });
  });
}

// Ex√©cution
if (require.main === module) {
  runE2ENoCEX();
}

module.exports = { runE2ENoCEX };
